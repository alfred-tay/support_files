#!/bin/bash

set -e  # Exit on error
set -u  # Treat unset variables as errors

# Get today's date
TODAY_DATE=$(date +"%d-%m-%y")

# Download reference gene list
REF_DB_DIR=~/miniconda3/db/23s_ref
REF_FILE=23s_ref

rm -f $REF_FILE 2> /dev/null
wget -q https://raw.githubusercontent.com/alfred-tay/support_files/main/$REF_FILE
mkdir -p $REF_DB_DIR
cp $REF_FILE $REF_DB_DIR/sequences
abricate --setupdb

# Rename .fa files to .fasta
for FILE in *.fa; do
  [ -e "$FILE" ] || continue
  mv "$FILE" "${FILE%.fa}.fasta"
done

# Run abricate on each .fasta file
COUNT_file=0
for FILE in *.fasta; do
  BASENAME="${FILE%.fasta}"
  abricate --db 23s_ref "$FILE" > "${BASENAME}_list" 2>/dev/null
  ((COUNT_file++))
  echo -ne "\rProcessed: $COUNT_file"
done
echo

# Clean up reference database
rm -r $REF_DB_DIR

# Process abricate output (skip empty _list files)
for FILE in *_list; do
  [ -s "$FILE" ] || continue  # Skip if file is empty
  BASENAME="${FILE%_list}"
  COUNT=$(wc -l < "$FILE")
  cp "$FILE" "${BASENAME}_temp"

  for ((i=1; i<COUNT; i++)); do
    LAST_LINE=$(tail -1 "${BASENAME}_temp")
    read -r DATA1 DATA2 DATA3 DATA4 DATA5 DATA6 DATA7 <<< "$LAST_LINE"

    if [[ "$DATA5" == "-" ]]; then
      samtools faidx -i "$BASENAME.fasta" "$DATA2:$DATA3-$DATA4" > "${BASENAME}_${DATA6}"
    else
      samtools faidx "$BASENAME.fasta" "$DATA2:$DATA3-$DATA4" > "${BASENAME}_${DATA6}"
    fi

    head -n -$i "$FILE" > "${BASENAME}_temp"
  done

done
rm -f *_temp *.fai

# Generate gene extraction report
rm -f Gene_extraction_report
for FILE in *.fasta; do
  BASENAME="${FILE%.fasta}"
  echo -ne "$BASENAME" >> Gene_extraction_report

  for GENE in $(grep ">" *_ref | sed 's/>//g'); do
    OUTPUT_FILE="${BASENAME}_${GENE}"
    [ -e "$OUTPUT_FILE" ] || continue  # Skip if file is missing
    COUNT=$(awk '/^>/{l=0; next}{l+=length($0)}END{print l}' "$OUTPUT_FILE")
    echo -ne "\t$COUNT" >> Gene_extraction_report
  done
  echo >> Gene_extraction_report

done

# Generate final report
rm -f temp
{
  echo -ne "ID\t"
  grep ">" *_ref | sed 's/>//g' | tr '\n' '\t'
  echo
} > temp
cat temp Gene_extraction_report > 23s_report_presence_absence.csv
rm -f temp Gene_extraction_report

# Perform sequence alignment
cat 23s_ref *_23s > 23s_all
clustalo -i 23s_all -o 23s_all.aln
sed -i 's/:.*//g; s/_len=.*//g' 23s_all.aln

# Extract sequence data
for FILE in $(grep ">" 23s_all.aln | sed 's/>//g'); do
  samtools faidx 23s_all.aln "$FILE" > "${FILE}.fasta_temp"
done

rm -f *.fai *_temp1

# Identify mutation positions
samtools faidx 23s_all.aln 23s > 23s_temp
seqkit locate -i -p CGCGGCAAGACGGA 23s_temp > 23s_ref_temp

sed -i '1d' 23s_ref_temp
POSITION=$(awk 'NR==1 {print $6}' 23s_ref_temp)
NEXT_POSITION=$((POSITION + 1))

rm -f report_temp
for FILE in *.fasta_temp; do
  STRAIN_ID=$(head -1 "$FILE" | sed 's/>//')
  samtools faidx "$FILE" "$STRAIN_ID:$POSITION-$POSITION" > "${FILE}_1"
  DATA1=$(sed '1d' "${FILE}_1")
  
  samtools faidx "$FILE" "$STRAIN_ID:$NEXT_POSITION-$NEXT_POSITION" > "${FILE}_2"
  DATA2=$(sed '1d' "${FILE}_2")

  echo -ne "$STRAIN_ID\t$DATA1\t$DATA2\n" >> report_temp

done

# Finalize mutation report
{
  echo -ne "ID\tA2142 (aka 2146)\tA2143 (aka 2147)\n"
  cat report_temp
} > "23s_report_${TODAY_DATE}.csv"

rm -f *temp*
