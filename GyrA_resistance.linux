#!/bin/bash

# Get today's date
today_date=$(date +"%d-%m-%y")

# Download reference file
wget -q https://raw.githubusercontent.com/alfred-tay/support_files/main/gyrA_ref

# Setup database
db_dir=~/miniconda3/db/gyrA_ref
mkdir -p $db_dir
cp gyrA_ref $db_dir/sequences
abricate --setupdb

# Rename .fa files to .fasta
for file in *.fa; do
    mv "$file" "${file%.fa}.fasta" 2>/dev/null
done

# Run Abricate on all .fasta files
COUNT_file=0
for FILE in *.fasta; do
  BASENAME="${FILE%.fasta}"
  abricate --db gyrA_ref "$FILE" > "${BASENAME}_list" 2>/dev/null
  ((COUNT_file++))
  echo -ne "\rProcessed: $COUNT_file"
done
echo

# Clean up database
rm -r $db_dir

# Extract gene sequences from Abricate output
for file in *_list; do
    base_name="${file%_list}"
    count=$(wc -l < "$file")
    cp "$file" "${base_name}_temp"
    
    for ((i = 1; i < count; i++)); do
        read -r data1 data2 data3 data4 data5 data6 data7 < <(tail -1 "${base_name}_temp")
        
        if [[ "$data5" == "-" ]]; then
            samtools faidx -i "${base_name}.fasta" "$data2:$data3-$data4" > "${base_name}_$data6"
        else
            samtools faidx "${base_name}.fasta" "$data2:$data3-$data4" > "${base_name}_$data6"
        fi
        
        head -n -$i "$file" > "${base_name}_temp"
    done

done

# Cleanup
rm *_temp *.fai

# Generate Gene Extraction Report
rm -f Gene_extraction_report
for file in *.fasta; do
    base_name="${file%.fasta}"
    echo -ne "$base_name" >> Gene_extraction_report
    
    for gene in $(grep ">" *_ref | sed 's/>//g'); do
        count=$(awk '/^>/{l=0; next}{l+=length($0)}END{print l}' "${base_name}_$gene")
        echo -ne "\t$count" >> Gene_extraction_report
    done
    echo >> Gene_extraction_report
done

# Format Report
{
    echo -ne "ID\t"
    grep ">" *_ref | sed 's/>//g' | tr '\n' '\t'
    echo
    cat Gene_extraction_report
} > GyrA_report.csv
rm -f Gene_extraction_report

# Translate Sequences
for file in *_GyrA; do
    seqkit translate --frame 1 --frame 2 --frame 3 --trim "$file" | \
    awk '/^>/ {sub("Contig_", "", $0); sub(":.*", "", $0); header=$0; next} {seq=seq $0} 
         END {print header; print seq}' | \
    awk 'BEGIN {max=0} /^>/ {header=$0; next} {if (length($0) > max) {max = length($0); longest = $0; longest_header = header}} 
         END {print longest_header; print longest}' > "${file}.aa"
done

seqkit translate --frame 1 --frame 2 --frame 3 --trim gyrA_ref | \
awk '/^>/ {sub("Contig_", "", $0); sub(":.*", "", $0); header=$0; next} {seq=seq $0} 
     END {print header; print seq}' | \
awk 'BEGIN {max=0} /^>/ {header=$0; next} {if (length($0) > max) {max = length($0); longest = $0; longest_header = header}} 
     END {print longest_header; print longest}' > 26695_GyrA.aa

# Align Sequences
cat *.aa > GyrA_all
clustalo -i GyrA_all -o GyrA_all.aln
sed -i 's/:.*//g; s/_len=.*//g' GyrA_all.aln

# Extract GyrA from the alignment file to include any indels that may change the position
for f1 in `more GyrA_all.aln | grep ">" | sed 's/>//g'`
do
samtools faidx GyrA_all.aln $f1 > ${f1}.fasta_temp
done

# Extract mutation sites
seqkit locate -i -p RIVGDVIGKYHPHGDN GyrA.fasta_temp > GyrA.fasta_temp2_1
sed -i '1d' GyrA.fasta_temp2_1
data1=$(awk 'NR==1 {print $6}' GyrA.fasta_temp2_1)

# Report mutations
rm -f report_temp
for f2 in *.fasta_temp; do
    data2=$(head -1 "$f2" | sed 's/>//')
    samtools faidx "$f2" "$data2:$data1-$data1" > "${f2}_1"
    data3=$(sed '1d' "${f2}_1")
    
    rm *.fai
    data1_1=$((data1 + 4)) #position 91
    samtools faidx "$f2" "$data2:$data1_1-$data1_1" > "${f2}_2"
    data3_1=$(sed '1d' "${f2}_2")
    
    echo -e "$data2\t$data3\t$data3_1" >> report_temp
done

# Finalize Mutation Report
echo -e "ID\tN87\tD91" > temp_heading
cat temp_heading report_temp > "GyrA_AA_${today_date}.csv"
rm -f *temp* *.fai
